CS265 Lab5 Data Structures and Algorithms
Author: Yongchang Cai
Date: 10/21/2016

Q1:
i. List: A linear sequence of an arbitrary number of items
ii. Stack: A collection of elements that is last in first out.
iii. Queue: collection of elements that is first in first out.
Iv. Dictionary (Map): A data structure that generally an association of
unique keys with values. 

Q2:
It will need O(log2(n)). Since it is a sorted collection, it will keep check
the middle element. So the worst time would be O(log2(n).

Q3:
It will need O(n). Linear search will check every elements inorder until it
get the target. So the worst time would be when the target value is the last
element and it will need O(n) time.

Q4:
The case that linear search would be better than binary search is for a
unsorted array. Since it will need extra time O(2log2n) if use binary
search.

Q5:
*84* 37 93 82 98 27 63 73 93 27 75 55 45 8
37 82 27 63 73 27 75 55 45 8 *84* 93 98 93
*37* 82 27 63 73 27 75 55 45 8 84 *93* 98 93
27 27 8 *37* 82 63 73 75 55 45 84 *93* 98 93
*27* 27 8 37 *82* 63 73 75 55 45 84 93 *98* 93
8 *27* 27 37 63 73 75 55 45 *82* 84 93 93 *98*
8 27 27 37 *63* 73 75 77 45 82 84 93 93 98
8 27 27 37 45 *63* 73 75 77 82 84 93 93 98
8 27 27 37 45 63 *73* 75 77 82 84 93 93 98
8 27 27 37 45 63 73 *75* 77 82 84 93 93 98
8 27 27 37 45 63 73 75 77 82 84 93 93 98

Q6:
L: ( 3 24 06 )

Q7:
L:  [13,[28,[24,[]]]]
p:  []
q:  [24,[3,[]]]

Q8: 
Since the pointer s has been allocated 100 bytes of memory then in part 2 it
directly copy a 100 bytes memory of buffer into s. So, s would not have
enough memory to change the cotents with adding string. 

Q9:
table: 3 -> ( ["Bob",38] ["Cos",86] ) 
4 -> ( ["Vera",99] ["Nash",11] ["Kate", 28] ["Jaga",24] )
5 -> ( ["Jesse",78] )

Q10:
int find( char *key, int *p_ans )
{
	entry* sym;
	int h = hash(key);
	
	for (sym=table[h]; sym!=NULL; sym=sym->next)
	{		
		if ( strcmp(key, sys->key) == 0)
		{	
			p_ans = val;
			return 1;
		}
	}
	
	return 0;	
}
